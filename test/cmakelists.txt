cmake_minimum_required(VERSION 3.16)
project(UnitTest)

# 设置构建类型和C++标准
set(CMAKE_BUILD_TYPE "Debug")
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# 设置输出路径
set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)

# 添加编译定义
add_compile_definitions(UNIT_TEST_FLAG=1)
add_compile_definitions(PROD_BUILD_FLAG=0)

# 启用代码覆盖率分析
option(ENABLE_COVERAGE "Enable coverage analysis" OFF)

if(ENABLE_COVERAGE)
    # 添加覆盖率相关的编译选项
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --coverage")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} --coverage")
endif()


# 引入配置文件
if(EXISTS "${CMAKE_SOURCE_DIR}/subdirectories.cmake")
    include("${CMAKE_SOURCE_DIR}/subdirectories.cmake")
else()
    message(WARNING "subdirectories.cmake not found. No subdirectories will be added.")
endif()


# 添加自定义目标以生成覆盖率报告
if(ENABLE_COVERAGE)
    find_program(LCOV lcov)
    find_program(GENHTML genhtml)

    if(NOT LCOV OR NOT GENHTML)
        message(WARNING "lcov or genhtml not found. Coverage report will not be generated.")
    else()
        # 清理旧的覆盖率文件
        add_custom_command(
            OUTPUT ${CMAKE_BINARY_DIR}/coverage.info
            COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/coverage.info
            COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_BINARY_DIR}/coverage_report
            COMMENT "Cleaning old coverage files..."
        )

        # 生成覆盖率报告
        add_custom_target(coverage
            COMMAND ${LCOV} --directory . --capture --output-file coverage.info
            COMMAND ${LCOV} --remove coverage.info "/usr/*" "*/test/*" "*/7/*" "*/gtest/*" "*/gmock/*" --output-file coverage.info > /dev/null 2>&1
            COMMAND ${GENHTML} -o coverage_report coverage.info
            COMMAND ${CMAKE_COMMAND} -E remove coverage.info
            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
            COMMENT "Generating coverage report..."
            DEPENDS ${CMAKE_BINARY_DIR}/coverage.info
        )
    endif()
endif()
